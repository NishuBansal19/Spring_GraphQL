
scalar Date

type Query {
	helloWorld:String!
	greeting(firstName:String!, lastName:String): String!
	books: [Book]
	bookById(id:Int):Book
	publishers:[Publisher]
	partialBookById(id:Int):Book
	# using the Type Defintion Factory
	booksByPage(first:Int, after:String): BookConnection @connection(for:"Book")
}

#type BookConnection {
#	edges: [BookEdge]
#	pageInfo: PageInfo
#}

#type BookEdge {
#	cursor:String
#	node:Book
#}

#type PageInfo {
#	hasPreviousPage: Boolean!
#	hasNextPage: Boolean!
#}



# book object type
type Book {
	id:Int,
	title:String! @uppercase,
	totalPages:Int @deprecated(reason:"prefer using pages"),
	rating:Float,
	isbn:String,
	version:Int,
	publishedDate:Date,
	publisher:Publisher #ManyToOne
}


type Publisher {
 id:Int,
 name:String,
 books:[Book] #OneToMany
}


